<%- css(page.css_name) %>
  <%- js('js/highlight.min.js') %>
    <script>hljs.initHighlightingOnLoad();</script>
    <div id="article">
      <div class="content_box f5back">
        <div class="content_box_con bentween">
          <div content="con_left">
            <h3>
              <%= page.what_DatenLord.title %>
            </h3>
            <% if (page.what_Datenlord.con && page.what_Datenlord.con.length){ %>
              <% page.what_Datenlord.con.forEach(function(info, i){ %>
                <p class="text">
                  <%= info %>
                </p>
                <% }) %>
                  <% } %>
          </div>
          <div class="con_right">
            <img src="<%- full_url_for(page.what_Datenlord.img_url)%>" class="con_img">
          </div>
        </div>
      </div>
      <div class="content_box ffback">
        <div class="content_box_con">
          <div>
            <h3 style="text-align: center">Why do we build Date?</h3>
            <div style="display: flex;justify-content: space-between">
              <div content="con_left" style="display: flex;align-items: center;margin-right: 20px">
                <img src="<%- full_url_for('images/6.png')%>">
              </div>
              <div class="con_right">
                <p class="text">Firstly, the recent computer hardware architecture revolution stimulates storage
                  software
                  refractory. The mainstream SDS systems haven’t changed much in recent 10 years, and at that time
                  hard-disk
                  drive (HDD) was the main storage device. Nowadays, solid-state drive (SSD) become the mainstream, not
                  to
                  mention the most advanced SSD, NVMe and non-volatile memory. The performance of storage devices
                  becomes
                  hundreds of times faster than before, that the HDD latency is around 1~10 ms, whereas the SSD latency
                  is
                  around 50–150 μs, NVMe latency is around 25 μs, and non-volatile memory latency is 350 ns. With the
                  storage
                  performance revolution, traditional blocking-style/synchronous IO becomes very inefficient, and
                  non-blocking-style/asynchronous IO is booming, such as the recent Linux kernel has built
                  native-asynchronized IO mechanism, io_uring. Moreover, context switch overhead becomes no more
                  negligible,
                  w.r.t. SSD latency. Many modern programming languages have proposed asynchronized programming, green
                  thread
                  or coroutine to manage asynchronous IO tasks, so as to avoid context switch overhead introduced by
                  blocking-style/synchronous IO. Therefore we think it’s time to build a next-generation SDS system that
                  takes
                  advantage of the storage performance revolution as far as possible, by leveraging
                  non-blocking/asynchronous
                  IO, asynchronized programming, NVMe, and even non-volatile memory.</p>
              </div>
            </div>
            <div style="margin-top: 40px;display: flex;justify-content: space-between">
              <div content="con_left">
                <p class="text">Secondly, most existing IT systems are computing and storage isolated, that applications
                  and
                  storage systems had their dedicated clusters, respectively. This isolated architecture is no longer
                  feasible, in that nowadays, applications are dealing with much larger data than ever before. One
                  notorious
                  example is that an AI training job takes one hour to load training data whereas the training job
                  itself
                  finishes in only 45 minutes. Therefore, isolating computing and storage makes the whole system very
                  inefficient, as transferring data between applications and storage systems wastes much time. We
                  propose
                  a
                  more efficient computing and storage coupled architecture, which schedules jobs closer to data, so as
                  to
                  reduce data transfer overhead and improve data processing efficiency, exactly as HDFS does, except
                  HDFS
                  is
                  dedicated for Hadoop, whereas DatenLord is more for container ecosystems.</p>
              </div>
              <div class="con_right" style="display: flex;align-items: center">
                <img src="<%- full_url_for('images/7.png')%>">
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="content_box f5back">
        <div class="content_box_con">
          <div>
            <h3 style="text-align: center">Architecture</h3>
            <img src="<%- full_url_for('images/architecture.png')%>" style="height: 584px;width: 1100px">
            <div style="margin-top: 40px;">
              <p class="lineHight18">
                DatenLord is of classical master-slave architecture. To achieve better storage performance, DatenLord
                has
                a
                coupled architecture with K8S, that DatenLord can be deployed within a K8S cluster, in order to leverage
                data
                locality to speed up data access. The above figure is the overall DatenLord architecture, the green
                parts
                are
                DatenLord components, the blue parts are K8S components, the yellow part represents containerized
                applications. There are several major components of DatenLord: master node (marked as Daten Lord), slave
                node
                (marked as Daten Sklavin), and K8S plugins.
              </p>
              <br>
              <p class="lineHight18">
                The master node has three parts: S3 compatible interface (S3I), Lord, and Meta Storage Engine (MSE). S3I
                provides a convenient way to read and write data in DatenLord via S3 protocol, especially for bulk
                upload
                and
                download scenarios, e.g. uploading large amounts of data for big data batch jobs or AI machine learning
                training jobs. Lord is the overall controller of DatenLord, which controls all the internal behaviours
                of
                DatenLord, such as where and how to write data, synchronize data, etc. MSE stores all the meta
                information
                of
                DatenLord, such as the file paths of all the data stored in each slave node, the user-defined labels of
                each
                data file, etc. MSE is similar to HDFS namenode.
              </p>
              <br>
              <p class="lineHight18">
                The slave node has four parts: Data Storage Engine (DSE), Sklavin, Meta Storage Engine (MSE), S3/P2P
                interface. DSE is in charge of communicating with kernel modules so as to read/write data from/to memory
                or
                disks. More specifically, DatenLord sets up a filesystem in userspace (FUSE) in a slave node by using
                the
                FUSE
                driver and library. DSE is to implement the FUSE, executing all the underlying FUSE operations, such as
                open,
                create, read, and write, etc. DSE can implement different types of FUSE for different scenarios, e.g.,
                memory-based FUSE, disk-based FUSE, and SAN-based FUSE, etc. Sklavin is to communicate with the Lord of
                the
                master node and handle the requests from the Lord and CSI driver, such as health check report, data
                synchronization, data consistency inspection, Lord election, etc. The MSE of the slave node is a local
                copy
                of
                the MSE from the master node. S3/P2P interface provides a convenient way, either S3 or P2P, to read,
                write
                and
                synchronize data in a slave node.
              </p>
              <br>
              <p class="lineHight18">
                The K8S plugins include a container storage interface (CSI) driver and a customer filter. The CSI driver
                is
                for DatenLord to work with K8S to manage volumes for container tasks, such as loading a read-only
                volume,
                creating a read-write volume. The customer filter is to help K8S to schedule tasks to data nearby based
                on
                the
                meta-information in MSE of the master node.
              </p>
            </div>
          </div>
        </div>
      </div>
      <div class="content_box ffback">
        <div class="content_box_con">
          <div>
            <h3 style="text-align: center;margin-bottom: 30px">DatenLord Optimization Strategy</h3>
            <div style="display: flex;justify-content: space-between">
              <p style="margin: 0" class="lineHight18">In general, there are two kinds of storage needs from an
                application
                perspective: one is latency-sensitive, and the other is throughput-sensitive. As for latency-sensitive
                applications, such as database applications, like MySQL, MongoDB, and ElasticSearch, etc, their
                performance
                relies on how fast a single I/O-request got handled. As for throughput-sensitive applications, such as
                big
                data and AI machine learning jobs, like Spark, Hadoop, and TensorFlow, etc, the more data load per unit
                time,
                the better their performance. </p>
            </div>
            <div style="margin-top: 30px;display: flex;justify-content: space-between">
              <p style="margin: 0" class="lineHight18">DatenLord is crafted to fit the aforementioned two scenarios.
                Specifically, to reduce latency, DatenLord caches in memory as much data as possible, in order to
                minimize
                disk access; to improve throughput (we focus on reading throughput currently), DatenLord, on one hand,
                prefetches data in memory to speed up access, on the other hand, leverages K8S to schedule tasks to data
                nearby, so as to minimize data transfer cost.</p>
            </div>
          </div>
        </div>
      </div>
      <div class="content_box fcback">
        <div class="content_box_con">
          <div style="width: 100%">
            <h3 style="text-align: center">Target Usage Scenarios</h3>
            <p style="margin: 30px 0 20px 0" class="lineHight18">DatenLord has several target scenarios, which fall into
              two
              main categories:</p>
            <div style="display: flex;justify-content: space-between;width: 100%">
              <div style="width: 540px; display: flex;flex-direction: column;align-items: center">
                <img src="<%- full_url_for('images/4.png')%>">
                <p class="lineHight18">Latency-sensitive cases, that DatenLord will coordinate with K8S to schedule
                  containers
                  close to data to minimize latency: Containerized applications, especially stateful applications;
                  Serverless,
                  Lambda, FaaS, etc, event-driven tasks;</p>
              </div>
              <div style="width: 540px; display: flex;flex-direction: column;align-items: center">
                <img src="<%- full_url_for('images/5.png')%>">
                <p class="lineHight18">Throughput-sensitive cases, that DatenLord will pre-load remote data into local
                  clusters to speed up access: AI and big-data jobs, especially training tasks; Multi-cloud storage
                  unified
                  management, to facilitate application migration across clouds.</p>
              </div>
            </div>
            <h3 style="text-align: center;margin: 100px 0 0 0;">Quick Start</h3>
          </div>
        </div>
      </div>
      <div class="quickStart">
        <div class="quickStart_bkcolor">
          <div class="quickStart_con">
            <h3 class="title margin71">To deploy DatenLord via K8S</h3>
            <div style="display: flex;justify-content: space-between;margin-top: 15px">
              <p class="quickStartWord wordmargin">just simply run:</p>
              <div style="width: 616px;" class="code_box">
                <p>sed -e 's/e2e_test/latest/g' scripts/datenlord.yaml > datenlord-deploy.yaml kubectl apply -f
                  datenlord-deploy.yaml</p>
              </div>
            </div>
            <div class="line_margin40">
              <img src="<%- full_url_for('images/quick_line.png')%>">
            </div>
            <div style="display: flex;justify-content: space-between">
              <div style="width: 680px; margin-top: -80px;height: auto;background-color: #000000;border-radius: 8px;">
                <pre><code>
  cat <<EOF >datenlord-demo.yaml
  apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
  name: pvc-datenlord-test
  spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  resources:
  requests:
  storage: 100Mi
  storageClassName: csi-datenlord-sc
  
  ---
  apiVersion: v1
  kind: Pod
  metadata:
  name: mysql-datenlord-test
  spec:
  containers:
  - name: mysql
  image: mysql
  env:
  - name: MYSQL_ROOT_PASSWORD
  value: "rootpasswd"
  volumeMounts:
  - mountPath: /var/lib/mysql
  name: data
  subPath: mysql
  volumes:
  - name: data
  persistentVolumeClaim:
  claimName: pvc-datenlord-test
  EOF
  
  kubectl apply -f datenlord-demo.yaml
                </code></pre>
              </div>
              <div style="position: relative">
                <div style="width: 385px;margin-top: -50px;margin-bottom: 50px">
                  <h3 class="title">To use DatenLord</h3>
                  <p class="title_con margintop20">just define PVC using DatenLord Storage Class, and then deploy a Pod
                    using
                    this PVC:</p>
                </div>
                <div style="height: 456px;border-right: 2px #1E1E1E solid;margin-right: 40px; opacity: 50%">

                </div>
                <div style="width: 381px;height: 321px;">
                  <img src="<%- full_url_for('images/jingyu.png')%>" class="jingyu">
                  <div style="clear: both"></div>
                </div>
                <div>
                  <img src="<%- full_url_for('images/line2.png')%>"
                    style="position: absolute;margin-top: 20px; margin-left: -228px;">
                </div>
              </div>
            </div>
            <p class="para margin60">It may need to install snapshot CRD and controller on K8S,</p>
            <h3 class="title" style="margin-top: 30px;margin-bottom: 35px">if used K8S CSI snapshot feature:</h3>
            <div style="width: 100%" class="code_box">
              <p>
                kubectl apply -f
                https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml
                kubectl apply -f
                https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml
                kubectl apply -f
                https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml
                kubectl apply -f
                https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/deploy/kubernetes/snapshot-controller/rbac-snapshot-controller.yaml
                kubectl apply -f
                https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/deploy/kubernetes/snapshot-controller/setup-snapshot-controller.yaml
              </p>
            </div>
          </div>
        </div>
      </div>
      <div class="content_box ffback">
        <div class="content_box_con">
          <div>
            <h3 style="text-align: center">Road Map</h3>
            <div style="margin-top: 40px ">
              <div style="margin: 23px 0 0 0;display: flex">
                <div class="ellipse">
                  <p>0.1</p>
                </div>
                <p style="margin: 0 0 0 20px">Refactor async fuse lib to provide clear async APIs, which is used by the
                  datenlord filesystem.</p>
              </div>
              <div style="margin: 23px 0 0 0;display: flex">
                <div class="ellipse">
                  <p>0.2</p>
                </div>
                <p style="margin: 0 0 0 20px">Support all Fuse APIs in the datenlord fs.</p>
              </div>
              <div style="margin: 23px 0 0 0;display: flex">
                <div class="ellipse">
                  <p>0.3</p>
                </div>
                <p style="margin: 0 0 0 20px">Make fuse lib fully asynchronous. Switch async fuse lib’s device
                  communication
                  channel from blocking I/O to io_uring.</p>
              </div>
              <div style="margin: 23px 0 0 0;display: flex">
                <div class="ellipse">
                  <p>0.4</p>
                </div>
                <p style="margin: 0 0 0 20px">Complete K8s integration test.</p>
              </div>
              <div style="margin: 23px 0 0 0;display: flex">
                <div class="ellipse">
                  <p>0.5</p>
                </div>
                <p style="margin: 0 0 0 20px">Complete Tensorflow k8s integration and finish performance comparison with
                  raw
                  fs.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>